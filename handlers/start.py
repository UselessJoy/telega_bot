from aiogram import Router, F
from aiogram.filters import CommandStart
from aiogram.types import Message
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from keyboards.all_kb import main_kb, faq_kb, que_kb
from filters.regexp_filter import RegFilter
from decouple import config
from create_bot import bot
import re
start_router = Router()

sn_reg = re.compile(r"^\d{6}$")
email_reg = re.compile(r"^\w+([.-]?\w+)*@\w+([.-]?\w+)*(\.\w{2,3})+$")
class Question(StatesGroup):
    serial_number = State()
    email = State()
    question = State()

@start_router.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ',
                         reply_markup=main_kb())

# @start_router.callback_query(F.data == 'faq_cb')
@start_router.message(F.text == 'üìù –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã')
                          # call: CallbackQuery
async def to_faq(message: Message):
    await message.answer("–ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —É–∑–Ω–∞—Ç—å?", reply_markup=faq_kb())

# @start_router.callback_query(F.data == 'faq_cb')
@start_router.message(F.text == 'üìù–ù–∞–ø–∏—Å–∞—Ç—å –≤–æ–ø—Ä–æ—Å')
                          # call: CallbackQuery
async def set_question(message: Message, state: FSMContext):
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ—Å—Ç–æ—è–Ω–∏–µ "–≤—ã–±–∏—Ä–∞–µ—Ç –≤–æ–ø—Ä–æ—Å"
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä", reply_markup=que_kb())
    await state.set_state(Question.serial_number)

@start_router.message(F.text == '–ù–∞–∑–∞–¥')
async def back(message: Message):
    await message.answer("–ù–∞–∑–∞–¥", reply_markup=main_kb())

@start_router.message(Question.serial_number, RegFilter(sn_reg))
async def proccess_serial_number(message: Message, state: FSMContext):
    await state.update_data(sn=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã")
    await state.set_state(Question.email)

@start_router.message(Question.serial_number)
async def error_serial_number(message: Message, state: FSMContext):
    await message.answer("–£ —Å–µ—Ä–∏–π–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 6 —Ü–∏—Ñ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É")

@start_router.message(Question.email, RegFilter(email_reg))
async def proccess_email(message: Message, state: FSMContext):
    await state.update_data(em=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å")
    await state.set_state(Question.question)

@start_router.message(Question.email)
async def error_email(message: Message, state: FSMContext):
    await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É")

@start_router.message(Question.question)
async def process_question(message: Message, state: FSMContext):
    question_data = await state.get_data()
    full_question = f"–°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä: {question_data['sn']}\n–ü–æ—á—Ç–∞: {question_data['em']}\n–°–æ–æ–±—â–µ–Ω–∏–µ:\n{message.text}"
    await bot.send_message(config('GROUP'), full_question)
    await message.answer(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ", reply_markup=main_kb())
    await state.clear()